---
import BaseHead from '../../../components/BaseHead.astro';
import Header from '../../../components/Header.astro';
import Footer from '../../../components/Footer.astro';
import { SITE_TITLE } from '../../../consts';
import { getCollection } from 'astro:content';

export async function getStaticPaths() {
	const posts = await getCollection('blog');
	
	// Get all unique categories
	const categories = [...new Set(posts.map(post => post.data.category.toLowerCase()))];
	
	// Create a path for each category
	return categories.map(category => {
		const filteredPosts = posts.filter(post => post.data.category.toLowerCase() === category);
		return {
			params: { category },
			props: { 
				posts: filteredPosts,
				categoryName: filteredPosts[0].data.category // Use the properly cased category name
			},
		};
	});
}

const { category } = Astro.params;
const { posts, categoryName } = Astro.props;

// Sort posts by date
const sortedPosts = posts.sort((a, b) => {
  const dateA = new Date(a.data.pubDate || '1970-01-01');
  const dateB = new Date(b.data.pubDate || '1970-01-01');
  return dateB.valueOf() - dateA.valueOf();
});
---

<html lang="en">
	<head>
		<BaseHead 
			title={`${categoryName} Stories | ${SITE_TITLE}`} 
			description={`Learn ${categoryName} through immersive storytelling tutorials.`} 
		/>
	</head>
	<body>
		<Header />
		<main>
			<section class="category-header">
				<h1>{categoryName}</h1>
				<p class="subtitle">Stories and tutorials about {categoryName.toLowerCase()}</p>
			</section>
			
			<!-- Posts Section -->
			<section class="posts-section">
				<div class="category-info">
					<div class="category-description">
						<p>
							Immerse yourself in our {categoryName} stories. Each article provides a narrative 
							learning experience that teaches real-world skills in a way that's both engaging 
							and effective.
						</p>
					</div>
					
					<div class="filter-actions">
						<a href="/blog/" class="back-link">
							<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
								<line x1="19" y1="12" x2="5" y2="12"></line>
								<polyline points="12 19 5 12 12 5"></polyline>
							</svg>
							All Categories
						</a>
						
						<!-- Sort Options -->
						<div class="sort-options">
							<label for="sort-select">Sort by:</label>
							<select id="sort-select" name="sort">
								<option value="latest">Latest</option>
								<option value="oldest">Oldest</option>
							</select>
						</div>
					</div>
				</div>
				
				<!-- Posts Grid -->
				<div class="posts-grid">
					{sortedPosts.map(post => (
						<article class="post-card">
							{post.data.heroImage && (
								<a href={`/blog/${post.slug}/`} class="card-image">
									<img src={post.data.heroImage} alt="" />
									<span class="card-difficulty">{post.data.difficulty}</span>
								</a>
							)}
							<div class="card-content">
								<h2 class="card-title">
									<a href={`/blog/${post.slug}/`}>{post.data.title}</a>
								</h2>
								<p class="card-excerpt">{post.data.description}</p>
								<div class="card-meta">
									<span class="card-date">{new Date(post.data.pubDate).toLocaleDateString('en-us', {
										year: 'numeric',
										month: 'short',
										day: 'numeric',
									})}</span>
									<span class="card-author">By {post.data.author}</span>
								</div>
								
								{post.data.tags.length > 0 && (
									<div class="card-tags">
										{post.data.tags.slice(0, 3).map(tag => (
											<a href={`/blog/tag/${tag.toLowerCase()}`} class="tag-pill small">
												{tag}
											</a>
										))}
									</div>
								)}
							</div>
						</article>
					))}
				</div>
				
				<!-- Empty State -->
				{sortedPosts.length === 0 && (
					<div class="empty-state">
						<svg xmlns="http://www.w3.org/2000/svg" width="64" height="64" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
							<circle cx="12" cy="12" r="10"></circle>
							<line x1="12" y1="8" x2="12" y2="12"></line>
							<line x1="12" y1="16" x2="12" y2="16"></line>
						</svg>
						<h2>No stories found</h2>
						<p>We don't have any stories in this category yet. Check back later or explore other categories.</p>
						<a href="/blog/" class="button primary">Browse All Stories</a>
					</div>
				)}
			</section>
		</main>
		<Footer />
	</body>
</html>

<style>
	main {
		width: 100%;
		max-width: 100%;
		margin: 0 auto;
	}

	.category-header {
		background-color: #f8f9fa;
		padding: 4rem 2rem;
		text-align: center;
		margin-bottom: 3rem;
	}

	.category-header h1 {
		font-size: 3rem;
		margin: 0 0 1rem 0;
	}

	.subtitle {
		font-size: 1.5rem;
		color: rgb(var(--gray));
		max-width: 800px;
		margin: 0 auto;
	}

	/* Posts Section */
	.posts-section {
		padding: 0 2rem;
		max-width: 1200px;
		margin: 0 auto;
	}

	.category-info {
		display: flex;
		justify-content: space-between;
		align-items: center;
		margin-bottom: 2rem;
		flex-wrap: wrap;
		gap: 1rem;
	}

	.category-description {
		max-width: 600px;
	}

	.category-description p {
		margin: 0;
		color: rgb(var(--gray));
		line-height: 1.7;
	}

	.filter-actions {
		display: flex;
		align-items: center;
		gap: 1.5rem;
	}

	.back-link {
		display: flex;
		align-items: center;
		gap: 0.5rem;
		color: var(--accent);
		text-decoration: none;
		font-weight: 500;
		transition: color 0.2s ease;
	}

	.back-link:hover {
		color: var(--accent-dark);
	}

	.sort-options {
		display: flex;
		align-items: center;
		gap: 0.5rem;
	}

	.sort-options label {
		color: rgb(var(--gray));
		font-size: 0.9rem;
	}

	.sort-options select {
		padding: 0.5rem;
		border: 1px solid rgba(var(--gray-light), 1);
		border-radius: 4px;
		background-color: #fff;
		color: rgb(var(--gray-dark));
		font-size: 0.9rem;
	}

	/* Posts Grid */
	.posts-grid {
		display: grid;
		grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
		gap: 2.5rem;
	}

	.post-card {
		border-radius: 8px;
		overflow: hidden;
		box-shadow: var(--box-shadow);
		transition: transform 0.3s ease, box-shadow 0.3s ease;
		background: white;
	}

	.post-card:hover {
		transform: translateY(-5px);
		box-shadow: 0 10px 20px rgba(var(--gray), 30%);
	}

	.card-image {
		display: block;
		position: relative;
		aspect-ratio: 16 / 9;
		overflow: hidden;
	}

	.card-image img {
		width: 100%;
		height: 100%;
		object-fit: cover;
		transition: transform 0.3s ease;
	}

	.card-image:hover img {
		transform: scale(1.05);
	}

	.card-difficulty {
		position: absolute;
		top: 1rem;
		right: 1rem;
		background-color: rgba(0, 0, 0, 0.6);
		color: white;
		padding: 0.25rem 0.75rem;
		border-radius: 2rem;
		font-size: 0.8rem;
	}

	.card-content {
		padding: 1.5rem;
	}

	.card-title {
		font-size: 1.3rem;
		margin: 0 0 0.75rem;
		line-height: 1.4;
	}

	.card-title a {
		color: rgb(var(--black));
		text-decoration: none;
		transition: color 0.2s ease;
	}

	.card-title a:hover {
		color: var(--accent);
	}

	.card-excerpt {
		margin: 0 0 1rem;
		font-size: 0.95rem;
		color: rgb(var(--gray));
		line-height: 1.6;
	}

	.card-meta {
		display: flex;
		justify-content: space-between;
		font-size: 0.85rem;
		color: rgb(var(--gray));
		margin-bottom: 1rem;
	}

	.card-tags {
		display: flex;
		gap: 0.5rem;
		flex-wrap: wrap;
	}

	.tag-pill {
		background-color: rgba(var(--gray-light), 0.5);
		color: rgb(var(--gray-dark));
		padding: 0.25rem 0.75rem;
		border-radius: 20px;
		text-decoration: none;
		font-size: 0.8rem;
		transition: all 0.2s ease;
	}

	.tag-pill:hover {
		background-color: var(--accent);
		color: white;
	}

	/* Empty State */
	.empty-state {
		text-align: center;
		padding: 4rem 0;
		color: rgb(var(--gray));
	}

	.empty-state svg {
		margin-bottom: 1.5rem;
		color: rgb(var(--gray));
	}

	.empty-state h2 {
		font-size: 1.8rem;
		color: rgb(var(--black));
		margin: 0 0 1rem;
	}

	.empty-state p {
		max-width: 500px;
		margin: 0 auto 2rem;
	}

	.button {
		display: inline-block;
		padding: 0.75rem 1.5rem;
		border-radius: 4px;
		font-weight: 600;
		text-decoration: none;
		transition: all 0.3s ease;
	}

	.button.primary {
		background-color: var(--accent);
		color: white;
	}

	.button.primary:hover {
		background-color: var(--accent-dark);
		transform: translateY(-3px);
	}

	/* Responsive Adjustments */
	@media (max-width: 768px) {
		.category-header h1 {
			font-size: 2.5rem;
		}

		.subtitle {
			font-size: 1.2rem;
		}

		.category-info {
			flex-direction: column;
			align-items: flex-start;
		}

		.posts-grid {
			grid-template-columns: 1fr;
		}

		.filter-actions {
			flex-wrap: wrap;
			width: 100%;
		}
	}
</style>

<script>
	// Add sort functionality
document.addEventListener('DOMContentLoaded', () => {
	const sortSelect = document.getElementById('sort-select') as HTMLSelectElement;
	const postsGrid = document.querySelector('.posts-grid');
	const postCards = [...document.querySelectorAll('.post-card')];
	
	if (sortSelect && postsGrid && postCards.length > 0) {
		sortSelect.addEventListener('change', (e) => {
			const target = e.target as HTMLSelectElement;
			const sortValue = target.value;
			
			// Remove all posts from the grid
			while (postsGrid.firstChild) {
				postsGrid.removeChild(postsGrid.firstChild);
			}
			
			// Sort posts based on the selected option
			let sortedPosts = [...postCards];
			if (sortValue === 'oldest') {
				// Sort by date (oldest first)
				sortedPosts.sort((a, b) => {
					const dateAElement = a.querySelector('.card-date');
					const dateBElement = b.querySelector('.card-date');
					const dateA = dateAElement ? new Date(dateAElement.textContent || '1970-01-01').valueOf() : 0;
					const dateB = dateBElement ? new Date(dateBElement.textContent || '1970-01-01').valueOf() : 0;
					return dateA - dateB;
				});
			} else {
				// Sort by date (latest first)
				sortedPosts.sort((a, b) => {
					const dateAElement = a.querySelector('.card-date');
					const dateBElement = b.querySelector('.card-date');
					const dateA = dateAElement ? new Date(dateAElement.textContent || '1970-01-01').valueOf() : 0;
					const dateB = dateBElement ? new Date(dateBElement.textContent || '1970-01-01').valueOf() : 0;
					return dateB - dateA;
				});
			}
			
			// Add sorted posts back to the grid
			sortedPosts.forEach(post => {
				postsGrid.appendChild(post);
			});
		});
	}
});
</script>
