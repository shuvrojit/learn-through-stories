---
import BaseHead from '../../components/BaseHead.astro';
import Header from '../../components/Header.astro';
import Footer from '../../components/Footer.astro';
import { SITE_TITLE, SITE_DESCRIPTION } from '../../consts';

// Get all blog posts and sort them by publication date
import { getCollection } from 'astro:content';

// Get all blog posts
const allPosts = await getCollection('blog');
console.log("DEBUG: Found", allPosts.length, "blog posts in collection");

// Sort posts by publication date (newest first)
const posts = allPosts
  .sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf())
  .map(post => {
    console.log(`Processing post with id: ${post.id}`);
    return {
      slug: post.id, // Use post.id directly to match what [...slug].astro expects
      data: post.data
    };
  });

// Extract categories with post counts
const categories = posts.reduce((acc: Record<string, number>, post) => {
  const category = post.data.category;
  if (!acc[category]) {
    acc[category] = 0;
  }
  acc[category]++;
  return acc;
}, {});

// Extract tags and find most popular ones
const allTagsMap = posts.reduce((acc: Record<string, number>, post) => {
  post.data.tags.forEach(tag => {
    if (!acc[tag]) {
      acc[tag] = 0;
    }
    acc[tag]++;
  });
  return acc;
}, {});

const topTags = Object.entries(allTagsMap)
  .sort((a, b) => b[1] - a[1])
  .slice(0, 10)
  .map(([tag]) => tag);

console.log("DEBUG: Processed", posts.length, "posts for display");
console.log("DEBUG: Found", Object.keys(categories).length, "categories");
console.log("DEBUG: Found", topTags.length, "top tags");
---

<html lang="en">
	<head>
		<BaseHead title={`Blog | ${SITE_TITLE}`} description={SITE_DESCRIPTION} />
	</head>
	<body>
		<Header />
		<main>
			<section class="blog-header">
				<h1>Stories & Tutorials</h1>
				<p class="subtitle">Immersive learning experiences through storytelling</p>
			</section>
			
			<!-- Filters Section -->
			<section class="filters-section">
				<div class="filters-container">
					<!-- Categories Filter -->
					<div class="filter-group">
						<h2>Categories</h2>
						<div class="filter-options categories">
							<a href="/blog/" class="filter-option active">All</a>
							{Object.entries(categories).map(([category, count]) => (
								<a href={`/blog/category/${category.toLowerCase()}`} class="filter-option">
									{category}
									<span class="count">{count}</span>
								</a>
							))}
						</div>
					</div>
					
					<!-- Popular Tags -->
					<div class="filter-group">
						<h2>Popular Tags</h2>
						<div class="filter-options tags">
							{topTags.map(tag => (
								<a href={`/blog/tag/${tag.toLowerCase()}`} class="tag-pill">
									{tag}
								</a>
							))}
						</div>
					</div>
					
					<!-- Skill Level Filter -->
					<div class="filter-group">
						<h2>Skill Level</h2>
						<div class="filter-options difficulty">
							<a href="/blog/" class="filter-option active">All</a>
							<a href="/blog/?difficulty=beginner" class="filter-option">Beginner</a>
							<a href="/blog/?difficulty=intermediate" class="filter-option">Intermediate</a>
							<a href="/blog/?difficulty=advanced" class="filter-option">Advanced</a>
						</div>
					</div>
				</div>
			</section>
			
			<!-- Posts Section -->
			<section class="posts-section">
				<div class="posts-grid">
					{posts.map(post => (
						<article class="post-card">
							{post.data.heroImage && (
								<a href={`/blog/${post.slug}/`} class="card-image">
									<img src={post.data.heroImage} alt="" />
									<span class="card-difficulty">{post.data.difficulty}</span>
								</a>
							)}
							<div class="card-content">
								<a href={`/blog/category/${post.data.category.toLowerCase()}`} class="card-category">{post.data.category}</a>
								<h2 class="card-title">
									<a href={`/blog/${post.slug}/`}>{post.data.title}</a>
								</h2>
								<p class="card-excerpt">{post.data.description}</p>
								<div class="card-meta">
									<span class="card-date">{new Date(post.data.pubDate).toLocaleDateString('en-us', {
										year: 'numeric',
										month: 'short',
										day: 'numeric',
									})}</span>
									<span class="card-author">By {post.data.author}</span>
								</div>
								
								{post.data.tags.length > 0 && (
									<div class="card-tags">
										{post.data.tags.slice(0, 3).map(tag => (
											<a href={`/blog/tag/${tag.toLowerCase()}`} class="tag-pill small">
												{tag}
											</a>
										))}
									</div>
								)}
							</div>
						</article>
					))}
				</div>
			</section>
		</main>
		<Footer />
	</body>
</html>

<style>
	main {
		width: 100%;
		max-width: 100%;
		margin: 0 auto;
	}

	.blog-header {
		background-color: #f8f9fa;
		padding: 4rem 2rem;
		text-align: center;
		margin-bottom: 3rem;
	}

	.blog-header h1 {
		font-size: 3rem;
		margin: 0 0 1rem 0;
	}

	.subtitle {
		font-size: 1.5rem;
		color: rgb(var(--gray));
		max-width: 800px;
		margin: 0 auto;
	}

	/* Filters Section */
	.filters-section {
		padding: 0 2rem;
		margin-bottom: 3rem;
	}

	.filters-container {
		max-width: 1200px;
		margin: 0 auto;
		background-color: #f8f9fa;
		padding: 1.5rem;
		border-radius: 8px;
		display: grid;
		grid-template-columns: 1fr;
		gap: 1.5rem;
	}

	.filter-group h2 {
		font-size: 1.2rem;
		margin: 0 0 1rem 0;
		color: rgb(var(--black));
	}

	.filter-options {
		display: flex;
		flex-wrap: wrap;
		gap: 0.5rem;
	}

	.filter-option {
		background-color: #fff;
		padding: 0.5rem 1rem;
		border-radius: 4px;
		text-decoration: none;
		color: rgb(var(--gray-dark));
		font-size: 0.95rem;
		transition: all 0.2s ease;
		display: flex;
		align-items: center;
		gap: 0.5rem;
	}

	.filter-option:hover {
		background-color: rgba(var(--gray-light), 0.5);
	}

	.filter-option.active {
		background-color: var(--accent);
		color: white;
	}

	.filter-option .count {
		background-color: rgba(var(--gray-light), 0.5);
		color: rgb(var(--gray-dark));
		padding: 0.1rem 0.5rem;
		border-radius: 12px;
		font-size: 0.8rem;
	}

	.filter-option.active .count {
		background-color: rgba(255, 255, 255, 0.2);
		color: white;
	}

	.tag-pill {
		background-color: rgba(var(--gray-light), 0.5);
		color: rgb(var(--gray-dark));
		padding: 0.5rem 1rem;
		border-radius: 20px;
		text-decoration: none;
		font-size: 0.9rem;
		transition: all 0.2s ease;
	}

	.tag-pill:hover {
		background-color: var(--accent);
		color: white;
	}

	.tag-pill.small {
		padding: 0.25rem 0.75rem;
		font-size: 0.8rem;
	}

	/* Posts Section */
	.posts-section {
		padding: 0 2rem;
	}

	.posts-grid {
		max-width: 1200px;
		margin: 0 auto;
		display: grid;
		grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
		gap: 2.5rem;
	}

	.post-card {
		border-radius: 8px;
		overflow: hidden;
		box-shadow: var(--box-shadow);
		transition: transform 0.3s ease, box-shadow 0.3s ease;
		background: white;
	}

	.post-card:hover {
		transform: translateY(-5px);
		box-shadow: 0 10px 20px rgba(var(--gray), 30%);
	}

	.card-image {
		display: block;
		position: relative;
		aspect-ratio: 16 / 9;
		overflow: hidden;
	}

	.card-image img {
		width: 100%;
		height: 100%;
		object-fit: cover;
		transition: transform 0.3s ease;
	}

	.card-image:hover img {
		transform: scale(1.05);
	}

	.card-difficulty {
		position: absolute;
		top: 1rem;
		right: 1rem;
		background-color: rgba(0, 0, 0, 0.6);
		color: white;
		padding: 0.25rem 0.75rem;
		border-radius: 2rem;
		font-size: 0.8rem;
	}

	.card-content {
		padding: 1.5rem;
	}

	.card-category {
		display: inline-block;
		font-size: 0.8rem;
		font-weight: 600;
		color: var(--accent);
		text-decoration: none;
		margin-bottom: 0.5rem;
		transition: color 0.2s ease;
	}

	.card-category:hover {
		color: var(--accent-dark);
		text-decoration: underline;
	}

	.card-title {
		font-size: 1.3rem;
		margin: 0 0 0.75rem;
		line-height: 1.4;
	}

	.card-title a {
		color: rgb(var(--black));
		text-decoration: none;
		transition: color 0.2s ease;
	}

	.card-title a:hover {
		color: var(--accent);
	}

	.card-excerpt {
		margin: 0 0 1rem;
		font-size: 0.95rem;
		color: rgb(var(--gray));
		line-height: 1.6;
	}

	.card-meta {
		display: flex;
		justify-content: space-between;
		font-size: 0.85rem;
		color: rgb(var(--gray));
		margin-bottom: 1rem;
	}

	.card-tags {
		display: flex;
		gap: 0.5rem;
		flex-wrap: wrap;
	}

	@media (min-width: 768px) {
		.filters-container {
			grid-template-columns: 1fr 2fr 1fr;
		}
	}

	@media (max-width: 768px) {
		.blog-header h1 {
			font-size: 2.5rem;
		}

		.subtitle {
			font-size: 1.2rem;
		}

		.posts-grid {
			grid-template-columns: 1fr;
		}
	}
</style>

<script>
	// Get the current URL parameters
	const urlParams = new URLSearchParams(window.location.search);
	const difficultyParam = urlParams.get('difficulty');
	
	// Set the active difficulty filter
	if (difficultyParam) {
		document.querySelectorAll('.difficulty .filter-option').forEach(option => {
			option.classList.remove('active');
		});
		
		const activeOption = document.querySelector(`.difficulty .filter-option[href*="?difficulty=${difficultyParam}"]`);
		if (activeOption) {
			activeOption.classList.add('active');
		}
	}
</script>
