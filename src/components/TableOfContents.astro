---
export interface Props {
  headings: Array<{
    depth: number;
    slug: string;
    text: string;
  }>;
}

const { headings } = Astro.props;

// Filter headings to only include h2 and h3 for the ToC
const filteredHeadings = headings.filter(
  heading => heading.depth === 2 || heading.depth === 3
);

// Check if we actually have any headings to display
const shouldShowToc = filteredHeadings.length > 0;
---

{shouldShowToc && (
  <div class="toc-container">
    <div class="toc-header">
      <h2>Table of Contents</h2>
      <button id="toggle-toc" aria-label="Toggle table of contents">
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <polyline points="6 9 12 15 18 9"></polyline>
        </svg>
      </button>
    </div>
    
    <nav id="toc-nav" class="toc">
      <ul>
        {filteredHeadings.map(heading => (
          <li class={`toc-item depth-${heading.depth}`}>
            <a href={`#${heading.slug}`}>{heading.text}</a>
          </li>
        ))}
      </ul>
    </nav>
  </div>
)}

<style>
  .toc-container {
    margin: 2rem 0 3rem;
    padding: 1.5rem;
    background-color: #f8f9fa;
    border-radius: 8px;
    border-left: 3px solid var(--accent);
  }

  .toc-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1rem;
  }

  .toc-header h2 {
    font-size: 1.4rem;
    margin: 0;
  }

  #toggle-toc {
    border: none;
    background: none;
    cursor: pointer;
    color: rgb(var(--gray));
    padding: 0.25rem;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  #toggle-toc:hover {
    color: var(--accent);
  }

  #toggle-toc svg {
    transform: rotate(0deg);
    transition: transform 0.2s ease;
  }

  #toggle-toc.collapsed svg {
    transform: rotate(180deg);
  }

  .toc {
    transition: max-height 0.3s ease;
    max-height: 500px;
    overflow: hidden;
  }

  .toc.collapsed {
    max-height: 0;
    overflow: hidden;
  }

  .toc ul {
    list-style: none;
    padding: 0;
    margin: 0;
  }

  .toc-item {
    margin: 0.8rem 0;
    line-height: 1.3;
  }

  .depth-3 {
    margin-left: 1.5rem;
    font-size: 0.95rem;
  }

  .toc a {
    color: rgb(var(--gray-dark));
    text-decoration: none;
    transition: color 0.2s ease;
  }

  .toc a:hover {
    color: var(--accent);
    text-decoration: underline;
  }

  @media (max-width: 768px) {
    .toc-container {
      padding: 1rem;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const toggleBtn = document.getElementById('toggle-toc');
    const tocNav = document.getElementById('toc-nav');
    
    if (toggleBtn && tocNav) {
      toggleBtn.addEventListener('click', () => {
        toggleBtn.classList.toggle('collapsed');
        tocNav.classList.toggle('collapsed');
      });
    }
  });
</script>
